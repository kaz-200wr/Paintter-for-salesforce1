<apex:page standardStylesheets="false" showHeader="false">
    <apex:remoteObjects >
        <apex:remoteObjectModel name="Paintter__c" fields="Id,ParentId__c,ImageId__c"/>
        <apex:remoteObjectModel name="PaintterData__c" fields="Id,Sort__c,Paintter__c,Base64Data__c"/>
    </apex:remoteObjects>
    
    <script>
    var canvas, c;
    var w = 1000;
    var h = 636;
    var imageMemory = new Array(10);
    var flagMemory = 0;
    var mode, hid, gage;

    $().ready(function() {
        //fastclick
        FastClick.attach(document.body);
        // init html5 canvas
        canvas = document.getElementById("myCanvas");
        c = canvas.getContext("2d");
        var drawing = false;
        var oldPos;
        
        // Initiaize Canvas and Context
        canvas.width = w;
        canvas.height = h;
        c.strokeStyle = "#000000";
        c.lineWidth = 1;
        c.lineJoin = "round";
        c.lineCap = "round";

        setPenWidth(1);

        //set memory gage
        gage = document.getElementById('memolyMeter');

        //Mode select(Insert or Update)
        if('{!$CurrentPage.parameters.hid}' != ''){
            hid = '{!$CurrentPage.parameters.hid}';
            mode='update';
            loadImage();
        }else{
            mode='insert';
            imageMemory[flagMemory] = c.getImageData(0,0,canvas.width,canvas.height);
        }

        // Start drawing when tap start
        canvas.addEventListener("touchstart", function (event) {
            drawing = true;
            oldPos = getPosT(event);
        }, false);
        
        // End drawing when tap end
        canvas.addEventListener("touchend", function () {
            touchendEvent();
        }, false);
        
        // gesture event
        canvas.addEventListener("gestureend", function () {
            touchendEvent();
        }, false);
        
        // Drawing
        canvas.addEventListener("touchmove", function (event) {
            var pos = getPosT(event);
            if (drawing) {
                c.beginPath();
                c.moveTo(oldPos.x, oldPos.y);
                c.lineTo(pos.x, pos.y);
                c.stroke();
                c.closePath();
                oldPos = pos;
            }
        });
        
        // Get touched positions
        function scrollX(){return document.documentElement.scrollLeft || document.body.scrollLeft;}
        function scrollY(){return document.documentElement.scrollTop || document.body.scrollTop;}
        function getPosT (event) {
            var mouseX = event.touches[0].clientX - $(canvas).position().left + scrollX();
            var mouseY = event.touches[0].clientY - $(canvas).position().top + scrollY();
            return {x:mouseX, y:mouseY};
        }
        
        //colorpicker
        $("#togglePaletteOnly").spectrum({
            showPalette: true,
            color: '#000',
            maxSelectionSize: 8,
            // preferredFormat: "hex",
            // showInput: true,
            palette: [
                ['#800000','#808000','#008000','#008080','#000080','#800080','#7F7F7F','#808080'],
                ['#804000','#408000','#008040','#004080','#400080','#800040','#666666','#999999'],
                ["#FF0000","#FFFF00","#00FF00","#00FFFF","#0000FF","#FF00FF","#4C4C4C","#B3B3B3"],
                ["#FF8000","#80FF00","#00FF80","#0080FF","#8000FF","#FF0080","#333333","#CCCCCC"],
                ["#FF6666","#FFFF66","#66FF66","#66FFFF","#6666FF","#FF66FF","#191919","#E6E6E6"],
                ["#FFCC66","#CCFF66","#66FFCC","#66CCFF","#CC66FF","#FF6FCF","#000000","#FFFFFF"],
                ["#EFE0B7","#EBBB34","#9FDE35","#90E1FE","#3C65EC","#F9CEF0","#7E43B1","#583810"],//This row is my wife's favorite colors

                // ["#000","#444","#666","#999","#ccc","#eee","#f3f3f3","#fff"],
                // ["#f00","#f90","#ff0","#0f0","#0ff","#00f","#90f","#f0f"],
                // ["#f4cccc","#fce5cd","#fff2cc","#d9ead3","#d0e0e3","#cfe2f3","#d9d2e9","#ead1dc"],
                // ["#ea9999","#f9cb9c","#ffe599","#b6d7a8","#a2c4c9","#9fc5e8","#b4a7d6","#d5a6bd"],
                // ["#e06666","#f6b26b","#ffd966","#93c47d","#76a5af","#6fa8dc","#8e7cc3","#c27ba0"],
                // ["#c00","#e69138","#f1c232","#6aa84f","#45818e","#3d85c6","#674ea7","#a64d79"],
                // ["#900","#b45f06","#bf9000","#38761d","#134f5c","#0b5394","#351c75","#741b47"],
                // ["#600","#783f04","#7f6000","#274e13","#0c343d","#073763","#20124d","#4c1130"]
            ]
        });
        $('.sp-replacer').last().hide();
        $('.sp-dd').hide();

        // pen color
        $(".sp-choose").click(function() {
            c.strokeStyle = $("#togglePaletteOnly").spectrum("get").toRgbString();
            c.globalCompositeOperation = 'source-over';
            $("#palet").addClass('active');
            $("#eraser").removeClass('active');

            setPenWidth(1);
        });

        // eraser
        $("#eraser").click(function (){
            c.globalCompositeOperation = 'destination-out';
            $("#palet").removeClass('active');
            $(this).addClass('active');

            setPenWidth(3);
        });
        
        // select pen width
        $(".styleSelecter").click(function () {
            $(".styleSelecter").removeClass('active');
            $(this).addClass('active');

            if($("#palet").hasClass('active')){
                setPenWidth(1);    
            }else{
                setPenWidth(3);    
            }
        });

        // Undo button
        $('#undoButton').click(function(){
            if($('#undoButton').hasClass('active')){
                doundo();
            }
        });

        // redo button
        $('#redoButton').click(function(){
            if($('#redoButton').hasClass('active')){
                doredo();
            }
        });

        // save button
        $("#saveButton").click(function () {
            if($("#saveButton").hasClass('active')){
                $("#saveButton").removeClass('active');
                $("#chatterButton").removeClass('active');
                $('#message').show();
                if(mode=='update'){
                    updateRecord();
                }else{
                    insertRecord();
                }
            }else{
                memoryErrorAlert();
            }
        });

        //chatter button
        $("#chatterButton").click(function () {
            if($("#chatterButton").hasClass('active')){
                $("#saveButton").removeClass('active');
                $("#chatterButton").removeClass('active');
                $('#message').show();
                postChatter();
            }else{
                memoryErrorAlert();
            }
        });
    }); 

    // temp save for redo, undo
    var tempSave = function(){
        if(flagMemory == imageMemory.length-1){
            imageMemory.shift();
        }else{
            ++flagMemory;
        }
        if(flagMemory == imageMemory.length-1){
            $('#redoButton').removeClass('active');
        }
        imageMemory[flagMemory] = c.getImageData(0,0,canvas.width,canvas.height);
        $('#undoButton').addClass('active');
    }

    var doundo = function(){
        if(flagMemory > 0){
            flagMemory--;
            c.putImageData(imageMemory[flagMemory], 0, 0);
            $('#redoButton').addClass('active');
            if(flagMemory==0){
                $('#undoButton').removeClass('active');
            }
        }
        calcMemory();
    }

    var doredo = function(){
        if(flagMemory < imageMemory.length-1){
            flagMemory++;
            c.putImageData(imageMemory[flagMemory], 0, 0);
            $('#undoButton').addClass('active');
            if(imageMemory[flagMemory + 1] === undefined){
                $('#redoButton').removeClass('active');
            }
        }
        calcMemory();
    }

    //Update
    var updateRecord = function(){
        console.log('update');
        saveImage(hid);
    }
    
    //insert
    var insertRecord = function(){
        console.log('insert');
        var image = new SObjectModel.Paintter__c({ParentId__c:'{!$CurrentPage.parameters.id}'});
        image.create(function(error, result, event){
            if(error === null){
                console.log('Target data create Success!');
                hid = result[0];
                mode='update';
                saveImage(hid);
            }else{
                console.log(error);
            }
        });
    }

    //save as png
    var saveImage = function(headerId){
        var base64 = canvas.toDataURL('image/png');
        saveImageApex('{!$CurrentPage.parameters.id}', headerId, base64);
    }
    
    //post chatter feed as jpsg
    var postChatter = function(){
        //fill background with white
        canvas_bk = document.getElementById("myCanvas_bk");
        c_bk = canvas_bk.getContext("2d");
        canvas_bk.width = w;
        canvas_bk.height = h;
        c_bk.fillStyle = "rgb(255, 255, 255)";
        c_bk.fillRect(0, 0, w, h);
        //marge the image
        var imageData = canvas.toDataURL('image/png');   
        var img = new Image();
        img.src = imageData;
        img.onload = function() {
            c_bk.drawImage(img, 0, 0);
            var base64 = canvas_bk.toDataURL('image/jpeg');
            postChatterApex('{!$CurrentPage.parameters.id}', base64);
        }
    }

    //Load data
    var loadImage = function(){
        var imagedatas = new SObjectModel.PaintterData__c();
        imagedatas.retrieve({
            where :{
                Paintter__c: { eq: '{!$CurrentPage.parameters.hId}'}
            },
            orderby: [{Sort__c: "ASC"}]
        },function(error, records){
            if(error === null && records.length > 0){
                console.log('Images retrieve Success!');
                var imageData = '';
                $.each(records, function( i, record ) {
                    imageData += String(record.get('Base64Data__c'));
                });
                var img = new Image();
                img.src = imageData;
                img.onload = function() {
                    c.drawImage(img, 0, 0);
                    imageMemory[0] = c.getImageData(0,0,canvas.width,canvas.height);
                    calcMemory();
                }
            }else{
                console.log('Images retrieve Error');
                console.log(error);
            }
        });
    }
    
    var setPenWidth = function(power){
        $.each($(".styleSelecter"), function() {
            if($(this).hasClass('active')){
                if($(this).attr("id") === 'small'){
                    c.lineWidth = 2 * power;
                }else if ($(this).attr("id") === 'middle'){
                    c.lineWidth = 4 * power;
                }else{
                    c.lineWidth = 8 * power;
                }
            }
        });
    }

    var touchendEvent = function(){
        calcMemory();
        tempSave();
        drawing = false;
    }

    var calcMemory = function(){
        if(canvas.toDataURL('image/png').length > 500000){
            $('#memoryValue').addClass('alert');
            $('#chatterButton').removeClass('active');
            $('#saveButton').removeClass('active');
        }else{
            $('#memoryValue').removeClass('alert');
            $('#chatterButton').addClass('active');
            $('#saveButton').addClass('active');
        }
        gage.value = canvas.toDataURL('image/png').length;
        $('#memoryValue').text(formatNumber(canvas.toDataURL('image/png').length));
    }

    var afterSave = function(action){
        swal({
            title: action + " success!",
            text: "",
            type: "success",
            timer: 3000,
        });
        $('#message').hide();
        $('#saveButton').addClass('active');
        $('#chatterButton').addClass('active');
    }

    var memoryErrorAlert = function(){
        swal({
            title: "Memory size error",
            text: "Please lower the memory size less then 500,000.",
            type: "error",
            timer: 3000,
        });
    }

    //format number
    var formatNumber = function(num) {
        return String(num).replace( /(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
    };

    </script>
</apex:page>